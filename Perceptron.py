# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Perceptron', [dirname(__file__)])
        except ImportError:
            import _Perceptron
            return _Perceptron
        if fp is not None:
            try:
                _mod = imp.load_module('_Perceptron', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Perceptron = swig_import_helper()
    del swig_import_helper
else:
    import _Perceptron
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def initPerceptron(*args):
  return _Perceptron.initPerceptron(*args)
initPerceptron = _Perceptron.initPerceptron

def forwardPass(*args):
  return _Perceptron.forwardPass(*args)
forwardPass = _Perceptron.forwardPass

def backProp(*args):
  return _Perceptron.backProp(*args)
backProp = _Perceptron.backProp

def MallocDoubleArr(*args):
  return _Perceptron.MallocDoubleArr(*args)
MallocDoubleArr = _Perceptron.MallocDoubleArr

def MallocIntArr(*args):
  return _Perceptron.MallocIntArr(*args)
MallocIntArr = _Perceptron.MallocIntArr

def Free(*args):
  return _Perceptron.Free(*args)
Free = _Perceptron.Free

def editDoubleArray(*args):
  return _Perceptron.editDoubleArray(*args)
editDoubleArray = _Perceptron.editDoubleArray

def editIntArray(*args):
  return _Perceptron.editIntArray(*args)
editIntArray = _Perceptron.editIntArray
# This file is compatible with both classic and new-style classes.


